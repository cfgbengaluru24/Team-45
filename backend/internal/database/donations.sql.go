// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: donations.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getForDonor = `-- name: GetForDonor :many
SELECT d.donation_id, d.amount, d.created_at, r.type, r.details
FROM donations d
INNER JOIN requests r on d.request_id = r.request_id
WHERE donor_uuid = $1
ORDER BY d.created_at desc
`

type GetForDonorRow struct {
	DonationID int64              `json:"donation_id"`
	Amount     int64              `json:"amount"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	Type       string             `json:"type"`
	Details    *string            `json:"details"`
}

func (q *Queries) GetForDonor(ctx context.Context, donorUuid uuid.UUID) ([]GetForDonorRow, error) {
	rows, err := q.db.Query(ctx, getForDonor, donorUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetForDonorRow
	for rows.Next() {
		var i GetForDonorRow
		if err := rows.Scan(
			&i.DonationID,
			&i.Amount,
			&i.CreatedAt,
			&i.Type,
			&i.Details,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
