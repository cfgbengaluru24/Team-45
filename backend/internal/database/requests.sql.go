// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: requests.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDonorRequests = `-- name: GetDonorRequests :many
SELECT request_id, type, details, cost, created_at
FROM requests
WHERE status = 4
`

type GetDonorRequestsRow struct {
	RequestID int64              `json:"request_id"`
	Type      string             `json:"type"`
	Details   *string            `json:"details"`
	Cost      int64              `json:"cost"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetDonorRequests(ctx context.Context) ([]GetDonorRequestsRow, error) {
	rows, err := q.db.Query(ctx, getDonorRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDonorRequestsRow
	for rows.Next() {
		var i GetDonorRequestsRow
		if err := rows.Scan(
			&i.RequestID,
			&i.Type,
			&i.Details,
			&i.Cost,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
